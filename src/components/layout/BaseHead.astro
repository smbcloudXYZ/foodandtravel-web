---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import { SITE } from '@/config'
import type { BaseHeadProps } from '@/types/component.types'
import 'katex/dist/katex.min.css'

const canonicalURL = new URL(Astro.url.pathname, Astro.site)

const { title, description } = Astro.props as BaseHeadProps
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
{SITE.fadeAnimation && <meta name="view-transition" content="same-origin" />}
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="apple-touch-icon" href="/apple-touch-icon.png" />
<link rel="preload" href="/fonts/Inter.woff2" as="font" type="font/woff2" crossorigin="anonymous" />
<link
  rel="preload"
  href="/fonts/Besley-Italic.woff2"
  as="font"
  type="font/woff2"
  crossorigin="anonymous"
/>
<link rel="sitemap" href="/sitemap-index.xml" />
<link
  rel="alternate"
  type="application/rss+xml"
  title={SITE.title}
  href={new URL('rss.xml', Astro.site)}
/>
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>
  {title || SITE.title}
</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL('/chiri-og.png', Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL('/chiri-og.png', Astro.url)} />

<!-- Transitions Initialization -->
<script is:inline define:vars={{ fadeAnimation: SITE.fadeAnimation }}>
  function initMotionPref(doc = document) {
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches
    const supportsViewTransitions = 'startViewTransition' in document

    doc.documentElement.classList.toggle('reduce-motion', prefersReducedMotion)

    doc.documentElement.classList.toggle(
      'disable-transitions',
      !fadeAnimation || !supportsViewTransitions
    )

    doc.documentElement.classList.add('js')
  }

  initMotionPref()

  document.addEventListener('astro:before-swap', ({ newDocument }) => {
    initMotionPref(newDocument)
  })

  document.addEventListener('astro:page-load', () => {
    initMotionPref()
  })

  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'visible') {
      initMotionPref()
    }
  })

  window.addEventListener('pageshow', () => {
    initMotionPref()
  })
</script>
